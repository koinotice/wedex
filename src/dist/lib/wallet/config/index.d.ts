declare function isinWhiteList(address: any): Promise<boolean>;
declare function getChainId(): any;
declare function getExchangeId(): any;
declare function getLabel(): any;
declare function getMaxFeeBips(): any;
declare function getTokenBySymbol(symbol: any): any;
declare function getTokenByAddress(address: any): any;
declare function getTokens(): any;
declare function fromWEI(symbol: any, valueInWEI: any, precision?: number): any;
declare function toWEI(symbol: any, value: any): any;
declare function getMarketByPair(pair: any): any;
declare function isSupportedMarket(market: any): any;
declare function getMarketBySymbol(baseToken: any, quoteToken: any): any;
declare function getMarketsByTokenR(token: any): any;
declare function getTokenSupportedMarkets(token: any): any[];
declare function getMarkets(): any;
declare function getGasLimitByType(type: any): any;
declare function getFeeByType(type: any): any;
declare function getWalletAddress(): any;
declare function getExchangeAddress(): any;
declare function getWallets(): any;
declare function getMaxAmountInWEI(): any;
declare const _default: {
    getTokenBySymbol: typeof getTokenBySymbol;
    getTokenByAddress: typeof getTokenByAddress;
    getTokens: typeof getTokens;
    getMarketBySymbol: typeof getMarketBySymbol;
    getMarketByPair: typeof getMarketByPair;
    getGasLimitByType: typeof getGasLimitByType;
    getFeeByType: typeof getFeeByType;
    isinWhiteList: typeof isinWhiteList;
    getChainId: typeof getChainId;
    getExchangeId: typeof getExchangeId;
    getLabel: typeof getLabel;
    getMaxFeeBips: typeof getMaxFeeBips;
    isSupportedMarket: typeof isSupportedMarket;
    getMarketsByTokenR: typeof getMarketsByTokenR;
    getTokenSupportedMarkets: typeof getTokenSupportedMarkets;
    getMarkets: typeof getMarkets;
    getWalletAddress: typeof getWalletAddress;
    getExchangeAddress: typeof getExchangeAddress;
    getMaxAmountInWEI: typeof getMaxAmountInWEI;
    getWallets: typeof getWallets;
    fromWEI: typeof fromWEI;
    toWEI: typeof toWEI;
};
export default _default;
